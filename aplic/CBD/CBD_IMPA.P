DEFINE INPUT PARAMETER s-codcia  LIKE integral.cb-dmov.codcia.
DEFINE INPUT PARAMETER x-CodCta  LIKE integral.cb-dmov.codcta.
DEFINE INPUT PARAMETER x-CodDiv  LIKE integral.cb-dmov.coddiv.
DEFINE INPUT PARAMETER x-Periodo LIKE integral.cb-dmov.periodo.
DEFINE INPUT PARAMETER x-NroMes  LIKE integral.cb-dmov.nromes.
DEFINE INPUT PARAMETER x-CodMon  LIKE integral.cb-dmov.codmon.
DEFINE INPUT PARAMETER x-tipo    LIKE integral.cb-dmov.codmon.

DEFINE OUTPUT PARAMETER ImpCal1  AS DECIMAL.
DEFINE OUTPUT PARAMETER ImpCal2  AS DECIMAL.
DEFINE OUTPUT PARAMETER ImpCal3  AS DECIMAL.
DEFINE OUTPUT PARAMETER ImpCal4  AS DECIMAL.
DEFINE OUTPUT PARAMETER ImpCal5  AS DECIMAL.
DEFINE OUTPUT PARAMETER ImpCal6  AS DECIMAL.

DEFINE VARIABLE i AS INTEGER.
DEFINE VARIABLE x-ImpDbe AS DECIMAL.
DEFINE VARIABLE x-ImpHbe AS DECIMAL.

ImpCal1 = 0.  /*  Debe del Mes     */
ImpCal2 = 0.  /*  Haber del Mes    */
ImpCal3 = 0.  /*  Saldo del Mes    */
ImpCal4 = 0.  /*  Debe Acumulado   */
ImpCal5 = 0.  /*  Haber Acumulado  */
ImpCal6 = 0.  /*  Saldo Acumulado  */ 

/* Saldo Inicial  = Saldo Acumulado (Impcal6) - Saldo del Mes (Impcal3) */ 
/* Saldo Actual   = Saldo Inicial  + Debe (Impcal1)  - Haber (Impcal2)  */
                            
IF X-tipo <> 1  THEN 
FOR EACH cb-dmov WHERE cb-dmov.codcia     =  s-codcia
                    AND   cb-dmov.periodo =  x-periodo
                    AND   cb-dmov.coddiv  BEGINS ( x-coddiv )
                    AND   cb-dmov.codcta  BEGINS ( x-codcta )
                    AND   cb-dmov.nromes <=  x-nromes
                    NO-LOCK:
   x-ImpDbe = 0.
   x-ImpHbe = 0.
                    
   CASE x-codmon:                                
   
    WHEN 1 THEN DO:           
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn1.
                              else x-ImpHbe = cb-dmov.ImpMn1.
    END.
    WHEN 2 THEN DO:
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn2.
                              else x-ImpHbe = cb-dmov.ImpMn2.
    END.
    WHEN 3 THEN DO:
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn3.
                              else x-ImpHbe = cb-dmov.ImpMn3.
    END.
    END CASE.
    ImpCal4 = ImpCal4 + x-ImpDbe.
    ImpCal5 = ImpCal5 + x-ImpHbe.
    IF cb-dmov.nromes =  x-NroMes 
    THEN DO:
        ImpCal1 = ImpCal1 + x-ImpDbe.
        ImpCal2 = ImpCal2 + x-ImpHbe.
    END.
END.                        
ELSE
FOR EACH cb-dmov WHERE cb-dmov.codcia     =  s-codcia
                    AND   cb-dmov.periodo =  x-periodo
                    AND   cb-dmov.coddiv  BEGINS ( x-coddiv )
                    AND   cb-dmov.codcta  BEGINS ( x-codcta )
                    AND   cb-dmov.nromes  =  x-nromes
                    NO-LOCK:
   x-ImpDbe = 0.
   x-ImpHbe = 0.
                    
   CASE x-codmon:
    WHEN 1 THEN DO:           
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn1.
                              else x-ImpHbe = cb-dmov.ImpMn1.
    END.
    WHEN 2 THEN DO:
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn2.
                              else x-ImpHbe = cb-dmov.ImpMn2.
    END.
    WHEN 3 THEN DO:
        IF NOT cb-dmov.tpomov then x-ImpDbe = cb-dmov.ImpMn3.
                              else x-ImpHbe = cb-dmov.ImpMn3.
    END.
    END CASE.
    ImpCal4 = ImpCal4 + x-ImpDbe.
    ImpCal5 = ImpCal5 + x-ImpHbe.
    IF cb-dmov.nromes =  x-NroMes 
    THEN DO:
        ImpCal1 = ImpCal1 + x-ImpDbe.
        ImpCal2 = ImpCal2 + x-ImpHbe.
    END.
END.

ImpCal3 = ImpCal1 - ImpCal2.
ImpCal6 = ImpCal4 - ImpCal5.
RETURN.
