
DEFINE NEW GLOBAL SHARED VARIABLE s-codcia AS INTEGER INITIAL 1.
DEFINE NEW GLOBAL SHARED VARIABLE s-periodo    AS INTEGER INITIAL 1996.
DEFINE NEW GLOBAL SHARED VARIABLE s-NroMes    AS INTEGER INITIAL 1. 
DEFINE VARIABLE I        AS INTEGER.
DEFINE NEW GLOBAL SHARED VARIABLE cb-niveles AS CHARACTER INITIAL "2,3,5".

DEFINE VARIABLE x-status  AS LOGICAL.
DEFINE VARIABLE pinta-mes AS CHARACTER FORMAT "X(30)".
DEFINE VARIABLE Mensaje2  AS CHARACTER FORMAT "X(30)".
DEFINE VARIABLE Mensaje3  AS CHARACTER FORMAT "X(30)".

DEFINE FRAME f-data
        pinta-mes SKIP
        mensaje2  skip
        mensaje3  skip
        WITH VIEW-AS DIALOG-BOX TITLE "REGENERANDO" NO-LABEL.

DEFINE VARIABLE C-1 AS INTEGER FORMAT "99":U INITIAL 0 
     LABEL "Del Mes" 
     VIEW-AS COMBO-BOX INNER-LINES 14
     LIST-ITEMS "0","1","2","3","4","5","6","7","8","9","10","11","12","13" 
     SIZE 8 BY 1
     BGCOLOR 15  NO-UNDO.

DEFINE VARIABLE C-2 AS INTEGER FORMAT "99":U INITIAL 0 
     LABEL "Al Mes" 
     VIEW-AS COMBO-BOX INNER-LINES 14
     LIST-ITEMS "0","1","2","3","4","5","6","7","8","9","10","11","12","13" .
  
DEFINE BUTTON B-acepta AUTO-GO 
     LABEL "&Aceptar" 
     SIZE 11 BY 1.08.

DEFINE BUTTON B-Cancel AUTO-END-KEY 
     LABEL "&Cancelar" 
     SIZE 11 BY 1.08.




DEFINE VARIABLE T-BORRA AS LOGICAL INITIAL no 
     LABEL "Borrar Acumulado Anterior" 
     VIEW-AS TOGGLE-BOX .




DEFINE FRAME DIALOG-1
     C-1 skip
     C-2 skip
     T-BORRA  skip
     B-acepta AT ROW 11 COL 17
     B-Cancel AT ROW 11 COL 43

    WITH VIEW-AS DIALOG-BOX 
   TITLE "Regeneraci¢n de Saldos".



/*
ON CHOOSE OF B-acepta IN FRAME DIALOG-1 /* Aceptar */
DO:
      
    ASSIGN C-1 C-2 t-borra.
    IF C-1 > C-2 THEN DO:
       MESSAGE "Rango de meses no valido"
       VIEW-AS ALERT-BOX ERROR.
       RETURN NO-APPLY.
    END.
    RUN anual.
    
END.
  */
  


ASSIGN C-1 = 0
       C-2 = 13.
       

WAIT-FOR GO OF FRAME DIALOG-1.


PROCEDURE acum-1 :
DEFINE INPUT PARAMETER p-codcia    AS INTEGER.
DEFINE INPUT PARAMETER p-periodo   AS INTEGER.
DEFINE INPUT PARAMETER P-nromes    AS INTEGER.
DEFINE INPUT PARAMETER p-codcta    AS CHAR.
DEFINE INPUT PARAMETER P-CodDiv    AS CHAR.
DEFINE INPUT PARAMETER P-DEBE1     AS DECIMAL.
DEFINE INPUT PARAMETER P-DEBE2     AS DECIMAL.
DEFINE INPUT PARAMETER P-HABER1    AS DECIMAL.
DEFINE INPUT PARAMETER P-HABER2    AS DECIMAL.

FIND cb-acmd WHERE cb-acmd.CodCia      = P-CODCIA
                   AND cb-acmd.Periodo = P-PERIODO
                   AND cb-acmd.CodCta  = P-CodCta
                   AND cb-acmd.CodDiv  = P-CodDiv
                   NO-ERROR.
IF NOT AVAILABLE cb-acmd
    THEN DO: 
        CREATE cb-acmd.
        ASSIGN cb-acmd.CodCia  = P-CODCIA
               cb-acmd.Periodo = P-periodo
               cb-acmd.CodDiv  = P-CodDiv
               cb-acmd.CodCta  = p-CodCta.
END.
IF P-DEBE1 = 0 AND P-DEBE2 = 0 AND P-HABER1 = 0 AND P-HABER2 = 0
   THEN RETURN.
ASSIGN   cb-acmd.DbeMn1[ P-NROMES + 1 ]  =  P-DEBE1
         cb-acmd.DbeMn2[ P-NROMES + 1 ]  =  P-DEBE2
         cb-acmd.HbeMn1[ P-NROMES + 1 ]  =  P-HABER1
         cb-acmd.HbeMn2[ P-NROMES + 1 ]  =  P-HABER2.
END PROCEDURE.


PROCEDURE acum-2 :
DEFINE INPUT PARAMETER p-codcia    AS INTEGER.
DEFINE INPUT PARAMETER p-periodo   AS INTEGER.
DEFINE INPUT PARAMETER P-nromes    AS INTEGER.
DEFINE INPUT PARAMETER p-codcta    AS CHAR.
DEFINE INPUT PARAMETER P-DEBE1     AS DECIMAL.
DEFINE INPUT PARAMETER P-DEBE2     AS DECIMAL.
DEFINE INPUT PARAMETER P-HABER1    AS DECIMAL.
DEFINE INPUT PARAMETER P-HABER2    AS DECIMAL.
DEFINE VARIABLE I AS INTEGER.
DEFINE VARIABLE x-codcta AS CHAR.

FIND FIRST cb-acmd WHERE cb-acmd.CodCia      = P-CODCIA
                         AND cb-acmd.Periodo = P-PERIODO
                         AND cb-acmd.CodCta  = P-CodCta
                         AND cb-acmd.CodDiv  = ""
                         NO-ERROR.
IF NOT AVAILABLE cb-acmd
    THEN DO: 
        CREATE cb-acmd.
        ASSIGN cb-acmd.CodCia  = P-CODCIA
               cb-acmd.Periodo = P-periodo
               cb-acmd.CodCta  = p-CodCta.
END.

IF P-DEBE1 = 0 AND P-DEBE2 = 0 AND P-HABER1 = 0 AND P-HABER2 = 0
   THEN RETURN.
   
ASSIGN   cb-acmd.DbeMn1[ P-NROMES + 1 ]  =  P-DEBE1
         cb-acmd.DbeMn2[ P-NROMES + 1 ]  =  P-DEBE2
         cb-acmd.HbeMn1[ P-NROMES + 1 ]  =  P-HABER1
         cb-acmd.HbeMn2[ P-NROMES + 1 ]  =  P-HABER2.

X-CODCTA = P-CODCTA.

REPEAT i = NUM-ENTRIES( cb-niveles ) TO 1 BY -1  :
    IF LENGTH( x-codcta ) > INTEGER( ENTRY( i, cb-niveles) )
    THEN DO:
        x-codcta = SUBSTR(x-CodCta, 1, INTEGER(ENTRY(i, cb-niveles))).
        FIND FIRST cb-acmd WHERE cb-acmd.CodCia      = P-CODCIA
                                 AND cb-acmd.Periodo = P-PERIODO
                                 AND cb-acmd.CodCta  = x-CodCta
                                 AND cb-acmd.CodDiv  = ""
                                 NO-ERROR.
        IF NOT AVAILABLE cb-acmd
           THEN DO: 
                CREATE cb-acmd.
                ASSIGN cb-acmd.CodCia  = P-CODCIA
                       cb-acmd.Periodo = P-periodo
                       cb-acmd.CodCta  = x-CodCta.
           END.
         ASSIGN  cb-acmd.DbeMn1[ P-NROMES + 1 ]  =  cb-acmd.DbeMn1[ P-NROMES + 1 ] +
                                                     P-DEBE1
                 cb-acmd.DbeMn2[ P-NROMES + 1 ]  =  cb-acmd.DbeMn2[ P-NROMES + 1 ] +
                                                     P-DEBE2
                 cb-acmd.HbeMn1[ P-NROMES + 1 ]  =  cb-acmd.HbeMn1[ P-NROMES + 1 ] +
                                                     P-HABER1
                 cb-acmd.HbeMn2[ P-NROMES + 1 ]   = cb-acmd.HbeMn2[ P-NROMES + 1 ] +
                                                     P-HABER2.
    END. /* FIN DEL IF */
    
END. /* FIN DEL REPEAT */

END PROCEDURE.




PROCEDURE anual :
DEFINE VAR D-DEBE1  AS DECIMAL.
DEFINE VAR D-DEBE2  AS DECIMAL.
DEFINE VAR D-HABER1 AS DECIMAL.
DEFINE VAR D-HABER2 AS DECIMAL.

DEFINE VAR C-DEBE1  AS DECIMAL.
DEFINE VAR C-DEBE2  AS DECIMAL.
DEFINE VAR C-HABER1 AS DECIMAL.
DEFINE VAR C-HABER2 AS DECIMAL.
DEFINE VAR K AS INTEGER.


x-status = SESSION:SET-WAIT-STATE("GENERAL").
STATUS INPUT OFF.
PAUSE 0 BEFORE-HIDE.
x-status = SESSION:IMMEDIATE-DISPLAY.
DISPLAY "Borrando movimientos Anteriores" @ pinta-mes  WITH FRAME f-data.

IF C-1 = 0 AND C-2 = 13 AND T-BORRA THEN 
DELETE FROM cb-acmd  WHERE   ( cb-acmd.CodCia  = s-codcia
                         AND  cb-acmd.Periodo = s-periodo 
                         ).
  
ELSE
FOR EACH cb-acmd
     WHERE cb-acmd.CodCia  = s-codcia
      AND  cb-acmd.Periodo = s-periodo :
     DO I = C-1 TO C-2 :      
       ASSIGN cb-acmd.DbeMn1[ I + 1 ]  = 0     
              cb-acmd.HbeMn1[ I + 1 ]  = 0
              cb-acmd.DbeMn2[ I + 1 ]  = 0     
              cb-acmd.HbeMn2[ I + 1 ]  = 0.
     END.      
END.           
   

DISPLAY "Procesando Informaci¢n" @ pinta-mes  WITH FRAME f-data.
DO K = C-1 TO C-2 :
   RUN bin/_mes.p ( INPUT K , 3,  OUTPUT pinta-mes ).
   pinta-mes = pinta-mes + ", " + STRING( s-periodo , "9999" ).
   DISPLAY pinta-mes WITH FRAME f-data.
FOR EACH cb-dmov
      WHERE cb-dmov.CodCia  = s-codcia AND
            cb-dmov.Periodo = s-periodo    AND
            cb-dmov.nromes  = K        
            BREAK
            BY cb-dmov.codcta
            BY cb-dmov.coddiv :
   IF FIRST-OF( cb-dmov.codcta ) THEN DO:
        mensaje2 = "Cuenta : " + cb-dmov.codcta.
        DISPLAY mensaje2 WITH FRAME f-data.
        C-DEBE1  =  0.
        C-DEBE2  =  0.
        C-HABER1 =  0.
        C-HABER2 =  0.
   END.
   IF FIRST-OF( cb-dmov.coddiv ) THEN DO:
        mensaje3 = "Divisi¢n : " + cb-dmov.coddiv.
        DISPLAY mensaje3 WITH FRAME f-data.
        D-DEBE1  =  0.
        D-DEBE2  =  0.
        D-HABER1 =  0.
        D-HABER2 =  0.
   END.
   IF cb-dmov.TPOMOV THEN DO:
      D-HABER1 = D-HABER1 + cb-dmov.IMPMN1.
      D-HABER2 = D-HABER2 + cb-dmov.IMPMN2.
      C-HABER1 = C-HABER1 + cb-dmov.IMPMN1.
      C-HABER2 = C-HABER2 + cb-dmov.IMPMN2.
   END.
   ELSE DO:
      D-DEBE1  = D-DEBE1 + cb-dmov.IMPMN1.
      D-DEBE2  = D-DEBE2 + cb-dmov.IMPMN2.
      C-DEBE1  = C-DEBE1 + cb-dmov.IMPMN1.
      C-DEBE2  = C-DEBE2 + cb-dmov.IMPMN2.
   END.
   IF LAST-OF( cb-dmov.coddiv ) THEN DO:
      IF cb-dmov.CODDIV <> "" THEN 
      RUN ACUM-1 ( cb-dmov.codcia,
                   cb-dmov.periodo,
                   cb-dmov.nromes,
                   cb-dmov.codcta,
                   cb-dmov.coddiv,
                   d-debe1,
                   d-debe2,
                   d-haber1,
                   d-haber2 ). 
   END.
   IF LAST-OF( cb-dmov.codcta ) THEN DO:
      RUN ACUM-2 ( cb-dmov.codcia,
                   cb-dmov.periodo,
                   cb-dmov.nromes,
                   cb-dmov.codcta,
                   c-debe1,
                   c-debe2,
                   c-haber1,
                   c-haber2 ). 
   END.
END.

END. /* FIN DEL DO */

HIDE FRAME f-data.
x-status = SESSION:SET-WAIT-STATE("").
END PROCEDURE.




PROCEDURE mensual :
/* Borrando Movimientos anteriores */
x-status = SESSION:SET-WAIT-STATE("GENERAL").
SESSION:IMMEDIATE-DISPLAY = NO.
STATUS INPUT OFF.
PAUSE 0.
DISPLAY "Borrando movimientos Anteriores" @ pinta-mes  WITH FRAME f-data.
FOR EACH integral.cb-acmd
     WHERE integral.cb-acmd.CodCia  = s-codcia
      AND  integral.cb-acmd.Periodo = s-periodo :
    ASSIGN integral.cb-acmd.DbeMn1[ s-NroMes + 1 ] = 0     
           integral.cb-acmd.HbeMn1[ s-NroMes + 1 ] = 0
           integral.cb-acmd.DbeMn2[ s-NroMes + 1 ] = 0     
           integral.cb-acmd.HbeMn2[ s-NroMes + 1 ] = 0.
     
END.
RUN bin/_mes.p ( INPUT s-NroMes , 3,  OUTPUT pinta-mes ).
pinta-mes = pinta-mes + ", " + STRING( s-periodo , "9999" ).
DISPLAY pinta-mes WITH FRAME f-data.
    
/* actualizando acumulados */
FOR EACH integral.cb-dmov
      WHERE integral.cb-dmov.CodCia  = s-codcia
        AND integral.cb-dmov.Periodo = s-periodo
        AND integral.cb-dmov.NroMes  = s-NroMes :
    RUN cbd/cb-acmd.p ( RECID( integral.cb-dmov ), YES, NO).
END.
x-status = SESSION:SET-WAIT-STATE("").
HIDE FRAME f-data.
END PROCEDURE.



