&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r2 GUI
/* Procedure Description
"Retorna los valores de los conceptos por persona"
*/
&ANALYZE-RESUME
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS Procedure 
/*--------------------------------------------------------------------------
    File        : 
    Purpose     :

    Syntax      :

    Description :

    Author(s)   :
    Created     :
    Notes       :
  ------------------------------------------------------------------------*/
/*          This .W file was created with the Progress UIB.             */
/*----------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
DEFINE INPUT  PARAMETER s-codcia    AS INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER s-PERIODO   AS INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER s-NROSEM   AS INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER s-codpln    AS INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER s-codcal    AS INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER s-codper    AS CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER VARIABLE    AS CHARACTER NO-UNDO.

DEFINE {&NEW} SHARED VARIABLE VAL-VAR AS DECIMAL EXTENT  20.

DEFINE VARIABLE NUM-Ele AS INTEGER NO-UNDO.
    
    DEFINE VARIABLE s-codmov    AS CHARACTER NO-UNDO.
    DEFINE VARIABLE t-codcia    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-PERIODO   AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-NROSEM    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-codpln    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-codcal    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-codmov    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-codmov-1  AS INTEGER   NO-UNDO.
    DEFINE VARIABLE t-codmov-2  AS INTEGER   NO-UNDO.    
    DEFINE VARIABLE t-numele    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE a-NROSEM    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE a-NROMES    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE S-VAL       AS DECIMAL   NO-UNDO.    
    DEFINE VARIABLE t-tpovar    AS CHARACTER NO-UNDO.
    DEFINE VARIABLE t-NroMes    AS INTEGER   NO-UNDO.
    DEFINE VARIABLE s-NROMES    AS INTEGER   NO-UNDO.
    

ASSIGN VAL-VAR = 0.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: Procedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW Procedure ASSIGN
         HEIGHT             = 2
         WIDTH              = 40.
                                                                        */
&ANALYZE-RESUME
 



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK Procedure 


/* ***************************  Main Block  *************************** */

DO Num-Ele = 1 TO NUM-ENTRIES( VARIABLE, ";" ) :
    RUN CALCULO( ENTRY(Num-Ele, VARIABLE, ";")).
    VAL-VAR[ Num-Ele ] = S-VAL.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CALCULO Procedure 
PROCEDURE CALCULO :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE INPUT  PARAMETER S-VAR AS CHARACTER NO-UNDO.

    DEFINE VARIABLE i AS INTEGER NO-UNDO.

    DEFINE VARIABLE SEM-1 AS INTEGER NO-UNDO.
    DEFINE VARIABLE SEM-2 AS INTEGER NO-UNDO.

    FIND FIRST PL-SEM WHERE PL-SEM.CODCIA = s-CODCIA 
                      AND PL-SEM.NroSem = s-NroSem 
                      AND PL-SEM.Periodo  = t-Periodo
                          NO-LOCK NO-ERROR.
    IF AVAILABLE PL-SEM                      
    THEN ASSIGN s-NroMes = PL-SEM.NroMes.
    ELSE ASSIGN s-NroMes = ?.
    
    ASSIGN s-val       = 0
           s-codmov    = SUBSTR( s-var, 2, 3) 
           t-codcia    = s-codcia
           t-PERIODO   = s-periodo
           t-NROSEM    = s-nrosem
           t-NROMES    = s-nromes
           t-codpln    = s-codpln
           t-codcal    = s-codcal
           a-NROSEM    = s-nrosem 
           a-NROmes    = s-nromes 
           t-tpovar    = SUBSTR( s-var, 1, 1) no-error.
    
    IF NOT (s-codmov > "000" AND s-codmov <= "999") THEN RETURN.
    ASSIGN t-codmov = INTEGER(s-codmov)
           t-codmov-1 = t-codmov 
           t-codmov-2 = t-codmov
           S-VAR      = SUBSTR( S-VAR, 5 ).


   IF S-VAR BEGINS ":"
   THEN DO:
        s-codmov    = SUBSTR( s-var, 2, 3).
        IF NOT (s-codmov > "000" AND s-codmov <= "999") THEN RETURN.
        ASSIGN t-codmov-2 = INTEGER(s-codmov)
               S-VAR      = SUBSTR( S-VAR, 5 ).
   END.

   /* parametros x concepto */
   IF S-VAR BEGINS  "(" 
   THEN DO:
        S-VAR = SUBSTR(S-VAR, 2).
        S-VAR = SUBSTR(S-VAR, 1, LENGTH(S-VAR) - 1).
        DO I = 1 TO NUM-ENTRIES( S-VAR):
            IF ENTRY( I, S-VAR) <> "?"
            THEN 
            CASE I:
                WHEN 1 THEN ASSIGN t-codcal  = INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                WHEN 2 THEN DO:
                    IF ENTRY(I, S-VAR) BEGINS "-"
                    THEN DO:
                        ASSIGN t-nrosem  = s-nrosem + INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                        ASSIGN t-nromes  = s-nromes + INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                        IF t-nrosem <= 0
                        THEN DO:
                            ASSIGN t-PERIODO = s-periodo - 1.
                            FIND LAST integral.PL-SEM WHERE integral.PL-SEM.Periodo = t-PERIODO
                                NO-LOCK NO-ERROR.
                            IF AVAILABLE integral.PL-SEM
                            THEN t-nrosem  = integral.PL-SEM.NROSEM + t-nrosem NO-ERROR.   
                            ELSE t-nrosem  = 53 + t-nrosem NO-ERROR.   
                        END.
                    END.
                    ELSE ASSIGN t-nrosem  = INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                END.
                WHEN 3 THEN ASSIGN t-codpln  = INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                WHEN 4 THEN ASSIGN t-periodo = INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
                WHEN 5 THEN ASSIGN t-codcia  = INTEGER( ENTRY( I, S-VAR) ) NO-ERROR.   
             END CASE.
        END.
    END.
    
    IF T-TPOVAR = "^" THEN
        FOR EACH integral.PL-MOV-SEM 
                WHERE integral.PL-MOV-SEM.codcal  = t-codcal     AND
                      integral.PL-MOV-SEM.CodCia  = t-codcia     AND
                      integral.PL-MOV-SEM.codper  = s-codper     AND
                      integral.PL-MOV-SEM.codpln  = t-codpln     AND
                      integral.PL-MOV-SEM.Periodo = t-periodo    AND
                      integral.PL-MOV-SEM.NroSEM  = t-nrosem     AND
                      integral.PL-MOV-SEM.CodMov  >= t-codmov-1  AND
                      integral.PL-MOV-SEM.CodMov  <= t-codmov-2  NO-LOCK:
            S-VAL = S-VAL + integral.PL-MOV-SEM.VALCAL-SEM.
        END.

    IF T-TPOVAR = "$" THEN 
        DO T-codmov = t-codmov-1 TO t-codmov-2:
            FOR EACH integral.PL-MOV-SEM 
                WHERE integral.PL-MOV-SEM.codcal  = t-codcal     AND
                      integral.PL-MOV-SEM.CodCia  = t-codcia     AND
                      integral.PL-MOV-SEM.CodMov  = t-codmov     AND
                      integral.PL-MOV-SEM.codper  = s-codper     AND
                      integral.PL-MOV-SEM.codpln  = t-codpln     AND
                      integral.PL-MOV-SEM.Periodo = t-periodo    AND
                      integral.PL-MOV-SEM.NroSem  >= 1           AND
                      integral.PL-MOV-SEM.NroSEM  <= t-nrosem   NO-LOCK:
                S-VAL = S-VAL + integral.PL-MOV-SEM.VALCAL-SEM.
            END.
        END.

    IF T-TPOVAR = "@" THEN DO:
        if t-nromes = 0 then t-nromes = s-nromes.
        FIND FIRST PL-SEM WHERE PL-SEM.CODCIA = s-CODCIA 
                            AND PL-SEM.NroMes  = t-NroMes 
                            AND PL-SEM.Periodo = t-Periodo
                            NO-LOCK NO-ERROR.
        IF AVAILABLE PL-SEM                      
        THEN ASSIGN SEM-1 = PL-SEM.NroSEM.
        ELSE ASSIGN SEM-1 = 0.

        FIND LAST PL-SEM WHERE PL-SEM.CODCIA = s-CODCIA 
                            AND PL-SEM.NroMes  = t-NroMes 
                            AND PL-SEM.Periodo = t-Periodo
                            NO-LOCK NO-ERROR.
        IF AVAILABLE PL-SEM                      
        THEN ASSIGN SEM-2 = PL-SEM.NroSEM.
        ELSE ASSIGN SEM-2 = 0.

        
        FOR EACH integral.PL-MOV-SEM 
                  WHERE integral.PL-MOV-SEM.codcal  = t-codcal     AND
                        integral.PL-MOV-SEM.CodCia  = t-codcia     AND
                        integral.PL-MOV-SEM.CodMov  = t-codmov     AND
                        integral.PL-MOV-SEM.codper  = s-codper     AND
                        integral.PL-MOV-SEM.codpln  = t-codpln     AND
                        integral.PL-MOV-SEM.Periodo = t-periodo    AND
                        integral.PL-MOV-SEM.NroSem  >= SEM-1       AND
                        integral.PL-MOV-SEM.NroSem  <= SEM-2
                         NO-LOCK:
                  S-VAL = S-VAL + integral.PL-MOV-SEM.VALCAL-SEM.
        END.        
    END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


