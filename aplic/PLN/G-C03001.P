/* 
    VALMIESA SOFTWARE 
*/ 

DEFINE INPUT PARAMETER ROWID-FLG-MES AS ROWID.
{bin/s-global.i}
{pln/s-global.i}

FIND integral.PL-FLG-MES WHERE
    ROWID(integral.PL-FLG-MES) = ROWID-FLG-MES NO-ERROR.
IF NOT AVAILABLE integral.PL-FLG-MES THEN DO:
    BELL.
    MESSAGE 'Registro de personal no existe'
        VIEW-AS ALERT-BOX ERROR.
    RETURN.
END.

DEFINE VARIABLE s-CodPln AS INTEGER NO-UNDO.
DEFINE VARIABLE s-CodCal AS INTEGER NO-UNDO.
DEFINE VARIABLE s-CodRed AS INTEGER NO-UNDO.

ASSIGN
    s-CodPln = 3
    s-CodCal = 1
    s-CodRed = 0.
DEFINE VARIABLE FECHA-INICIO-MES    AS DATE NO-UNDO.
DEFINE VARIABLE FECHA-FIN-MES       AS DATE NO-UNDO.

FECHA-INICIO-MES   = DATE(S-NROMES, 01, S-PERIODO).
IF S-NROMES < 12
THEN FECHA-FIN-MES  = DATE(S-NROMES + 1, 01, S-PERIODO) - 1.
ELSE FECHA-FIN-MES  = DATE(S-NROMES, 31, S-PERIODO).

FIND integral.PL-MOV-MES WHERE
    integral.PL-MOV-MES.CodCia  = integral.PL-FLG-MES.CodCia AND
    integral.PL-MOV-MES.Periodo = integral.PL-FLG-MES.Periodo AND
    integral.PL-MOV-MES.NroMes  = integral.PL-FLG-MES.NroMes AND
    integral.PL-MOV-MES.CodPln  = integral.PL-FLG-MES.CodPln AND
    integral.PL-MOV-MES.CodPer  = integral.PL-FLG-MES.CodPer AND
    integral.PL-MOV-MES.CodCal  = s-CodCal AND
    integral.PL-MOV-MES.CodMov  = s-CodRed NO-LOCK NO-ERROR.
IF AVAILABLE integral.PL-MOV-MES THEN
    ASSIGN
        integral.PL-FLG-MES.Exceso-Mes =
        integral.PL-MOV-MES.valcal-Mes.
ELSE ASSIGN integral.PL-FLG-MES.Exceso-Mes = 0.

DELETE FROM integral.PL-MOV-MES WHERE
    integral.PL-MOV-MES.CodCia  = integral.PL-FLG-MES.CodCia AND
    integral.PL-MOV-MES.Periodo = integral.PL-FLG-MES.Periodo AND
    integral.PL-MOV-MES.NroMes  = integral.PL-FLG-MES.NroMes AND
    integral.PL-MOV-MES.CodPln  = integral.PL-FLG-MES.CodPln AND
    integral.PL-MOV-MES.CodPer  = integral.PL-FLG-MES.CodPer AND
    integral.PL-MOV-MES.CodCal  = s-CodCal.

/* EXTORNAMOS LOS SALDOS DE CUENTA CORRIENTE */
FOR EACH integral.PL-MOV-CTE-MES WHERE
    integral.PL-MOV-CTE-MES.CodCia  = integral.PL-FLG-MES.CodCia AND
    integral.PL-MOV-CTE-MES.Periodo = integral.PL-FLG-MES.Periodo AND
    integral.PL-MOV-CTE-MES.NroMes  = integral.PL-FLG-MES.NroMes AND
    integral.PL-MOV-CTE-MES.CodPer  = integral.PL-FLG-MES.CodPer:
    FIND integral.PL-CFG-CTE-MES WHERE
        integral.PL-CFG-CTE-MES.CodCia  = integral.PL-FLG-MES.CodCia AND
        integral.PL-CFG-CTE-MES.Periodo = integral.PL-FLG-MES.Periodo AND
        integral.PL-CFG-CTE-MES.NroMes  = integral.PL-FLG-MES.NroMes AND
        integral.PL-CFG-CTE-MES.Clf-Cte-Mes = integral.PL-MOV-CTE-MES.Clf-Cte-Mes AND
        integral.PL-CFG-CTE-MES.Tpo-Cte-Mes = integral.PL-MOV-CTE-MES.Tpo-Cte-Mes AND
        integral.PL-CFG-CTE-MES.CodPer = integral.PL-MOV-CTE-MES.CodPer AND
        integral.PL-CFG-CTE-MES.Nro-Cte-Mes = integral.PL-MOV-CTE-MES.Nro-Cte-Mes NO-ERROR.
    IF AVAILABLE integral.PL-CFG-CTE-MES THEN
        ASSIGN
            integral.PL-CFG-CTE-MES.Sdo-Cte-Mes =
                integral.PL-CFG-CTE-MES.Sdo-Cte-Mes +
                integral.PL-MOV-CTE-MES.Val-Cte-Mes
            integral.PL-CFG-CTE-MES.Sdo-Usa-Mes =
                integral.PL-CFG-CTE-MES.Sdo-Usa-Mes +
                integral.PL-MOV-CTE-MES.Val-Usa-Mes.
    DELETE integral.PL-MOV-CTE-MES.
END.

IF integral.PL-FLG-MES.SitAct = 'Inactivo' THEN RETURN.

DEFINE NEW SHARED VARIABLE VAL-VAR AS DECIMAL EXTENT 20.
DEFINE VARIABLE VAR                AS DECIMAL NO-UNDO.
DEFINE VARIABLE NETO               AS DECIMAL NO-UNDO.
DEFINE VARIABLE TOTAL-REMUNERACION AS DECIMAL NO-UNDO.
DEFINE VARIABLE TOTAL-DESCUENTO    AS DECIMAL NO-UNDO.
DEFINE VARIABLE TOTAL-APORTE       AS DECIMAL NO-UNDO.
DEFINE VARIABLE GRATIFICACION      AS LOGICAL NO-UNDO.
DEFINE VARIABLE MES-ACTUAL         AS INTEGER NO-UNDO.

ASSIGN
    MES-ACTUAL    = s-NroMes
    GRATIFICACION = FALSE.

FIND FIRST integral.PL-SEM WHERE
    integral.PL-SEM.CodCia  = s-CodCia AND
    integral.PL-SEM.Periodo = s-Periodo AND
    integral.PL-SEM.NroMes  = s-NroMes AND
    integral.PL-SEM.FlgGtf  = TRUE NO-LOCK NO-ERROR.
IF AVAILABLE integral.PL-SEM THEN
    ASSIGN GRATIFICACION = TRUE.

FIND integral.PL-PERS WHERE integral.PL-PERS.CodPer = integral.PL-FLG-MES.CodPer NO-LOCK NO-ERROR.
FIND integral.PL-AFPS WHERE integral.PL-AFPS.CodAfp = integral.PL-FLG-MES.CodAfp NO-LOCK NO-ERROR.
FIND integral.PL-CLAS WHERE integral.PL-CLAS.Clase = integral.PL-FLG-MES.Clase NO-LOCK NO-ERROR.
FIND LAST integral.PL-VAR-SEM WHERE
    integral.PL-VAR-SEM.Periodo = s-Periodo AND
    integral.PL-VAR-SEM.NroSem <= s-NroSem NO-LOCK.
FIND LAST integral.PL-VAR-MES WHERE
    integral.PL-VAR-MES.Periodo = s-Periodo AND
    integral.PL-VAR-MES.NroMes <= MES-ACTUAL NO-LOCK.

DEFINE VARIABLE ASIGNACION-FAMILIAR AS DECIMAL NO-UNDO.
ASSIGN ASIGNACION-FAMILIAR = integral.PL-VAR-MES.ValVar-Mes[1].

DEFINE VARIABLE UIT-PROMEDIO AS DECIMAL NO-UNDO.
ASSIGN UIT-PROMEDIO = integral.PL-VAR-MES.ValVar-Mes[2].

DEFINE VARIABLE REG-PREST-SALUD AS DECIMAL NO-UNDO.
ASSIGN REG-PREST-SALUD = integral.PL-VAR-MES.ValVar-Mes[3].

DEFINE VARIABLE SIST-NAC-PENSIONES AS DECIMAL NO-UNDO.
ASSIGN SIST-NAC-PENSIONES = integral.PL-VAR-MES.ValVar-Mes[4].

DEFINE VARIABLE FONAVI AS DECIMAL NO-UNDO.
ASSIGN FONAVI = integral.PL-VAR-MES.ValVar-Mes[5].

DEFINE VARIABLE TPO-CAMBIO AS DECIMAL NO-UNDO.
ASSIGN TPO-CAMBIO = integral.PL-VAR-MES.ValVar-Mes[6].

DEFINE VARIABLE TOPE-SEGURO-AFP AS DECIMAL NO-UNDO.
ASSIGN TOPE-SEGURO-AFP = integral.PL-VAR-MES.ValVar-Mes[7].

DEFINE VARIABLE MOVILIDAD AS DECIMAL NO-UNDO.
ASSIGN MOVILIDAD = integral.PL-VAR-MES.ValVar-Mes[8].

DEFINE VARIABLE MINIMO-LEGAL AS DECIMAL NO-UNDO.
ASSIGN MINIMO-LEGAL = integral.PL-VAR-MES.ValVar-Mes[9].

DEFINE VARIABLE CALCULO-MENSUAL-CTS AS DECIMAL NO-UNDO.
ASSIGN CALCULO-MENSUAL-CTS = integral.PL-VAR-MES.ValVar-Mes[10].

DEFINE VARIABLE HORAS-EFECTIVAS-MES AS DECIMAL NO-UNDO.
ASSIGN HORAS-EFECTIVAS-MES = integral.PL-VAR-MES.ValVar-Mes[11].

DEFINE VARIABLE CALCULO-VAC-TRUNCAS AS DECIMAL NO-UNDO.
ASSIGN CALCULO-VAC-TRUNCAS = integral.PL-VAR-MES.ValVar-Mes[12].

DEFINE VARIABLE CALCULO-GRAT-TRUNCA AS DECIMAL NO-UNDO.
ASSIGN CALCULO-GRAT-TRUNCA = integral.PL-VAR-MES.ValVar-Mes[13].

DEFINE VARIABLE SENATI AS DECIMAL NO-UNDO.
ASSIGN SENATI = integral.PL-VAR-MES.ValVar-Mes[14].

/* FIN DE CABECERA */


RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^100(0);^118(0);^142(0);^501(0);^502(0);^503(0);^504(0);^800(0)" ).
/* Si su contrato ya vencio */
IF ( PL-FLG-MES.Vcontr <> ? AND
    PL-FLG-MES.Vcontr < fecha-inicio-mes ) THEN RETURN.

DEFINE VARIABLE dias-trabajados AS DECIMAL NO-UNDO.
DEFINE VARIABLE ing-diario      AS DECIMAL NO-UNDO.
DEFINE VARIABLE ing-hora        AS DECIMAL NO-UNDO.
DEFINE VARIABLE ing-fondo-snp   AS DECIMAL NO-UNDO.
DEFINE VARIABLE ing-fondo-spp   AS DECIMAL NO-UNDO.
DEFINE VARIABLE ing-fonavi      AS DECIMAL NO-UNDO.
DEFINE VARIABLE rem-ordinaria   AS DECIMAL NO-UNDO.
DEFINE VARIABLE no-afecto-5ta   AS DECIMAL NO-UNDO.
DEFINE VARIABLE no-afecto-rps   AS DECIMAL NO-UNDO.
DEFINE VARIABLE factor          AS DECIMAL NO-UNDO.
DEFINE VARIABLE tiempo-de-serv  AS DECIMAL NO-UNDO.
DEFINE VARIABLE quinquenio      AS LOGICAL NO-UNDO.
DEFINE VARIABLE remuneracion-fija AS DECIMAL NO-UNDO.
DEFINE VARIABLE descuento         AS DECIMAL NO-UNDO.

IF VAL-VAR[1] > 0 THEN dias-trabajados = VAL-VAR[1].
ELSE dias-trabajados = 30.

dias-trabajados = dias-trabajados - ( VAL-VAR[2] + VAL-VAR[3] +
    VAL-VAR[4] + VAL-VAR[5] + VAL-VAR[6] + VAL-VAR[7] ).

IF dias-trabajados > 0 THEN
    factor = dias-trabajados / 30.
ELSE factor = 0.

remuneracion-fija = VAL-VAR[8] . 


/* 10 Tipo de Pago ( 0 -> Soles   1-> Dolares) */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^010(0)" ).
/* TIPO DE PAGO */
var = VAL-VAR[1].
RUN @GRABA(10,'Otros').

/* 11 Tipo de Cambio */ 
ASSIGN VAR = 0.
/* TIPO DE CAMBIO */
var = tpo-cambio.

RUN @GRABA(11,'Otros').

/* 100 Dias Trabajados */ 
ASSIGN VAR = 0.
/* DIAS TRABAJADOS */
var = dias-trabajados.
RUN @GRABA(100,'Otros').

/* 118 Desc Médico */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^118(0)" ).
var = VAL-VAR[1].
RUN @GRABA(118,'Otros').

/* 142 Dias de Subsidio */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^142(0)" ).
var = VAL-VAR[1].
RUN @GRABA(142,'Otros').

/* 501 Falta Justificada */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^501(0)" ).
var = VAL-VAR[1].
RUN @GRABA(501,'Otros').

/* 502 Falta Injustificada */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^502(0)" ).
var = VAL-VAR[1].
RUN @GRABA(502,'Otros').

/* 503 Licencia S/Goce De Haber */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^503(0)" ).
var = VAL-VAR[1].

RUN @GRABA(503,'Otros').

/* 504 Suspención */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^504(0)" ).
var = VAL-VAR[1].
RUN @GRABA(504,'Otros').

/* 800 Asignacion Mensual */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^800(0);^010(0)" ).
/* ASIGNACION MENSUAL */
DEFINE VARIABLE Sueldo AS DECIMAL NO-UNDO.
Sueldo = VAL-VAR[1].
IF VAL-VAR[2] = 1 AND TPO-CAMBIO > 0 THEN
   Sueldo = VAL-VAR[1] * TPO-CAMBIO.

IF PL-FLG-MES.sitact = "Activo" THEN DO:
    IF dias-trabajados > 0 THEN var = Sueldo * factor.
    ELSE var = 0.
    rem-ordinaria = rem-ordinaria + Sueldo.
END.
RUN @GRABA(800,'Remuneraciones').

/* 405 Total Afecto a 5ta Categoria */ 
ASSIGN VAR = 0.
/* TOTAL AFECTO A 5TA CATEGORIA */
var = total-remuneracion - no-afecto-5ta.
RUN @GRABA(405,'Otros').

/* 409 Total Afecto a 5ta.Categ.Otras empresas */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^409(0)" ).
/* TOTAL AFECTO A 5TA CATEG OTRAS EMPRESAS */
var = VAL-VAR[1].
RUN @GRABA(409,'Otros').

/* 410 Imp.Renta de 5ta. Otras Empresas */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^410(0)" ).
/* IMP RENTA DE 5TA OTRAS EMPRESAS */
var = VAL-VAR[1].
RUN @GRABA(410,'Otros').

/* 206 ADELANTO QUINCENAL */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^206(2)" ).
/* ADEL QUINCENA */
var = VAL-VAR[1].

RUN @GRABA(206,'Descuentos').

/* 215 IMPUESTO A LA RENTA DE 5TA, CATEGORIA */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^800(1);$401(1);$401(4);$215(1)" ).
/* CALCULO DE IMPUESTO A LA RENTA DE QUINTA CATEGORIA */
DEF VAR AFECTO-QUINTA-CATEGORIA AS DEC INIT 0 NO-UNDO.
DEF VAR PROMEDIO-HORAS-EXTRAS AS DEC INIT 0 NO-UNDO.
DEF VAR PROMEDIO-COMISIONES AS DEC INIT 0 NO-UNDO.
DEF VAR REMUNERACION-MESES-ANTERIORES AS DEC INIT 0 NO-UNDO.
DEF VAR REMUNERACION-PROYECTADA AS DEC INIT 0 NO-UNDO.
DEF VAR GRATIFICACION-PROYECTADA AS DEC INIT 0 NO-UNDO.
DEF VAR IMPUESTO-RETENIDO-QUINTA AS DE INIT 0 NO-UNDO.
DEF VAR BASE-IMPONIBLE-QUINTA AS DE INIT 0 NO-UNDO.

DEF VAR x-Contador   AS INT NO-UNDO.
DEF VAR x-Contador-2 AS INT NO-UNDO.
DEF VAR x-MES AS INT NO-UNDO.
DEF VAR x-ANO AS INT NO-UNDO.

VAR = 0.     /* VALOR POR DEFECTO */

/* SI INGRESA ESTE MES O ES ENERO, ABRIL, AGOSTO O DICIEMBRE SE CALCULA TODO */
IF (PL-FLG-MES.FecIng >= FECHA-INICIO-MES OR PL-FLG-MES.FecIng <= FECHA-FIN-MES)
    OR (MES-ACTUAL = 01 OR MES-ACTUAL = 04 OR MES-ACTUAL = 08 OR MES-ACTUAL = 12)
THEN DO:
    /* RENTA BRUTA MENSUAL */
    AFECTO-QUINTA-CATEGORIA = VAL-VAR[1] .
    /* PROMEDIO HORAS EXTRAS */
    ASSIGN
        x-MES = MES-ACTUAL
        x-ANO = s-periodo
        x-Contador-2 = 0.
    DO x-Contador = 1 TO 3:
        FOR EACH PL-MOV-MES NO-LOCK WHERE PL-MOV-MES.codcia = s-codcia
                AND PL-MOV-MES.periodo = x-ANO
                AND PL-MOV-MES.nromes  = x-MES
                AND PL-MOV-MES.codpln  = PL-FLG-MES.codpln
                AND PL-MOV-MES.codper  = PL-FLG-MES.codper
                AND PL-MOV-MES.codcal  = 001    /* Pago Mensual */
                AND (PL-MOV-MES.codmov  = 125
                    OR PL-MOV-MES.codmov = 126
                    OR PL-MOV-MES.codmov = 127)
                BREAK BY PL-MOV-MES.codcia:
            PROMEDIO-HORAS-EXTRAS = PROMEDIO-HORAS-EXTRAS + PL-MOV-MES.valcal-mes.
            IF FIRST-OF(PL-MOV-MES.codcia)
            THEN x-Contador-2 = x-Contador-2 + 1.
        END.
        x-MES = x-MES - 1.
        IF x-MES <= 0
        THEN ASSIGN
                x-MES = 12
                x-ANO = x-ANO - 1.
    END.    
    IF x-Contador-2 = 3
    THEN PROMEDIO-HORAS-EXTRAS = PROMEDIO-HORAS-EXTRAS / 3.
    ELSE PROMEDIO-HORAS-EXTRAS = 0.
    /* PROMEDIO COMISIONES */
    ASSIGN
        x-MES = MES-ACTUAL
        x-ANO = s-periodo
        x-Contador-2 = 0.
    DO x-Contador = 1 TO 3:
        FOR EACH PL-MOV-MES NO-LOCK WHERE PL-MOV-MES.codcia = s-codcia
                AND PL-MOV-MES.periodo = x-ANO
                AND PL-MOV-MES.nromes  = x-MES
                AND PL-MOV-MES.codpln  = PL-FLG-MES.codpln
                AND PL-MOV-MES.codper  = PL-FLG-MES.codper
                AND PL-MOV-MES.codcal  = 001    /* Pago Mensual */
                AND PL-MOV-MES.codmov  = 209
                BREAK BY PL-MOV-MES.codcia:
            IF FIRST-OF(PL-MOV-MES.codcia)
            THEN x-Contador-2 = x-Contador-2 + 1.
            PROMEDIO-COMISIONES = PROMEDIO-COMISIONES + PL-MOV-MES.valcal-mes.
        END.
        x-MES = x-MES - 1.
        IF x-MES <= 0
        THEN ASSIGN
                x-MES = 12
                x-ANO = x-ANO - 1.
    END.    
    IF x-Contador-2 = 3
    THEN PROMEDIO-COMISIONES = PROMEDIO-COMISIONES / 3.
    ELSE PROMEDIO-COMISIONES = 0.
/*message 'promedio comisiones' promedio-comisiones.*/
    /* REMUNERACION MESES ANTERIORES */
    REMUNERACION-MESES-ANTERIORES = VAL-VAR[2].
/*message 'remun ant' remuneracion-meses-anteriores.*/
    /* PROYECCION DE REMUNERACIONES */
    REMUNERACION-PROYECTADA = ( AFECTO-QUINTA-CATEGORIA + 
                                PROMEDIO-HORAS-EXTRAS +
                                PROMEDIO-COMISIONES ) * (12 - MES-ACTUAL) +
                                TOTAL-REMUNERACION.

/*message 'rem proyec' remuneracion-proyectada.*/
    /* GRATIFICACIONES PROYECTADAS */
    IF MES-ACTUAL < 7
    THEN GRATIFICACION-PROYECTADA = (AFECTO-QUINTA-CATEGORIA +  
                                    PROMEDIO-COMISIONES) * 2.
    ELSE IF MES-ACTUAL < 12
        THEN GRATIFICACION-PROYECTADA = (AFECTO-QUINTA-CATEGORIA +
                                    PROMEDIO-COMISIONES) * 1 + VAL-VAR[3].
        ELSE GRATIFICACION-PROYECTADA = VAL-VAR[3].
/*message 'grat proy' gratificacion-proyectada.*/
    /* BASE IMPONIBLE */
    BASE-IMPONIBLE-QUINTA = (REMUNERACION-PROYECTADA + GRATIFICACION-PROYECTADA + REMUNERACION-MESES-ANTERIORES) 
                                - (7 * UIT-PROMEDIO).
    IF BASE-IMPONIBLE-QUINTA > 0 THEN VAR = BASE-IMPONIBLE-QUINTA.
    /* IMPUESTO A LA RENTA */
    IF VAR > 0
    THEN DO:
        IF VAR <= 27 * UIT-PROMEDIO
        THEN VAR = BASE-IMPONIBLE-QUINTA * 0.15.
        ELSE IF VAR <= 54 * UIT-PROMEDIO
            THEN DO:
                BASE-IMPONIBLE-QUINTA = BASE-IMPONIBLE-QUINTA -
                                        (27 * UIT-PROMEDIO).
                VAR = (27 * UIT-PROMEDIO * 0.15) +
                    (BASE-IMPONIBLE-QUINTA * 0.21).
            END.
            ELSE DO:
                BASE-IMPONIBLE-QUINTA = BASE-IMPONIBLE-QUINTA -
                                        (54 * UIT-PROMEDIO).
                VAR = (27 * UIT-PROMEDIO * 0.15) +
                    (27 * UIT-PROMEDIO * 0.21) +
                    (BASE-IMPONIBLE-QUINTA * 0.30).
            END.
    END.
    /* IMPUESTO RETENIDO MESES ANTERIORES */
    IMPUESTO-RETENIDO-QUINTA = VAL-VAR[4].
    /* RETENCIONES */
    VAR = (VAR - IMPUESTO-RETENIDO-QUINTA) / (12 - MES-ACTUAL + 1).
    VAR = ROUND(VAR, 0).
    IF VAR < 0 THEN VAR = 0.
END.    
ELSE DO:    /* TOMAMOS EL MONTO DEL MES ANTERIOR */
    ASSIGN
        x-MES = MES-ACTUAL - 1
        x-ANO = s-periodo.
    IF x-MES <= 0
    THEN ASSIGN
            x-MES = 12
            x-ANO = x-ANO - 1.
    FIND PL-MOV-MES WHERE PL-MOV-MES.codcia = s-codcia
        AND PL-MOV-MES.periodo = x-ANO
        AND PL-MOV-MES.nromes  = x-MES
        AND PL-MOV-MES.codpln  = PL-FLG-MES.codpln
        AND PL-MOV-MES.codper  = PL-FLG-MES.codper
        AND PL-MOV-MES.codcal  = 001
        AND PL-MOV-MES.codmov  = 215
        NO-LOCK NO-ERROR.
    IF AVAILABLE PL-MOV-MES THEN VAR = PL-MOV-MES.valcal-mes.
END.

RUN @GRABA(215,'Descuentos').

/* 401 Total Ingresos */ 
ASSIGN VAR = 0.
/* TOTAL INGRESOS */
var = total-remuneracion.
RUN @GRABA(401,'Otros').

/* 207 OTROS DESCUENTOS */ 
ASSIGN VAR = 0.
RUN PLN/P-CALC-M.R(
   integral.PL-FLG-MES.Codcia,
   integral.PL-FLG-MES.PERIODO,
   integral.PL-FLG-MES.NroMes,
   integral.PL-FLG-MES.codpln,
   s-codcal,
   integral.PL-FLG-MES.codper,
   "^207(0)" ).
/* OTROS DESCUENTOS */
var = VAL-VAR[1].

RUN @GRABA(207,'Descuentos').

/* 402 Total Egresos */ 
ASSIGN VAR = 0.
/* TOTAL EGRESOS */
var = total-descuento.
RUN @GRABA(402,'Otros').

/* 403 Total a Pagar */ 
ASSIGN VAR = 0.
/* TOTAL A  PAGAR */
var = neto.
RUN @GRABA(403,'Otros').

PROCEDURE @GRABA.
/*--------------*/

DEFINE INPUT PARAMETER s-CodMov AS INTEGER   NO-UNDO.
DEFINE INPUT PARAMETER s-TipBol AS CHARACTER NO-UNDO.

FIND FIRST PL-MOV-MES WHERE
    PL-MOV-MES.CodCia  = PL-FLG-MES.CodCia AND
    PL-MOV-MES.Periodo = PL-FLG-MES.Periodo AND
    PL-MOV-MES.NroMes  = PL-FLG-MES.NroMes AND
    PL-MOV-MES.CodPln  = PL-FLG-MES.CodPln AND
    PL-MOV-MES.CodPer  = PL-FLG-MES.CodPer AND
    PL-MOV-MES.CodCal  = s-CodCal AND
    PL-MOV-MES.CodMov  = s-CodMov NO-ERROR.
IF NOT AVAILABLE PL-MOV-MES THEN DO:
    IF VAR = 0 THEN RETURN.
    CREATE PL-MOV-MES.
    ASSIGN
        PL-MOV-MES.CodCia  = PL-FLG-MES.CodCia
        PL-MOV-MES.Periodo = PL-FLG-MES.Periodo
        PL-MOV-MES.NroMes  = PL-FLG-MES.NroMes
        PL-MOV-MES.CodPln  = PL-FLG-MES.CodPln
        PL-MOV-MES.CodPer  = PL-FLG-MES.CodPer
        PL-MOV-MES.CodCal  = s-CodCal
        PL-MOV-MES.CodMov  = s-CodMov.
END.
ASSIGN
    PL-MOV-MES.ValCal-MES  = ROUND(VAR, 2)
    PL-MOV-MES.Fch-Ult-Cal = TODAY
    PL-MOV-MES.Hra-Ult-Cal = STRING(TIME,'HH:MM').
IF s-TipBol = 'Remuneraciones' THEN
    ASSIGN
        NETO = NETO + PL-MOV-MES.ValCal-MES
        TOTAL-REMUNERACION = TOTAL-REMUNERACION + PL-MOV-MES.ValCal-MES.
IF s-TipBol = 'Descuentos' THEN
    ASSIGN
        NETO = NETO - PL-MOV-MES.ValCal-MES
        TOTAL-DESCUENTO = TOTAL-DESCUENTO + PL-MOV-MES.ValCal-MES.
IF s-TipBol = 'Aportes' THEN
    ASSIGN TOTAL-APORTE = TOTAL-APORTE + PL-MOV-MES.ValCal-MES.
END PROCEDURE.
