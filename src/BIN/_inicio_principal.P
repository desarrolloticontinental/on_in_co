&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12
/* Procedure Description
"Inicio del sistema"
*/
&ANALYZE-RESUME
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS Procedure 
/*--------------------------------------------------------------------------
    File        : 
    Purpose     :

    Syntax      :

    Description :

    Author(s)   :
    Created     :
    Notes       :
  ------------------------------------------------------------------------*/
/*          This .W file was created with the Progress UIB.             */
/*----------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
DEFINE NEW SHARED VARIABLE s-user-id AS CHARACTER FORMAT "x(16)".
DEFINE NEW SHARED VARIABLE s-codcia  AS INTEGER   FORMAT "999".
DEFINE NEW SHARED VARIABLE s-ruccia  AS CHAR.
DEFINE NEW SHARED VARIABLE cb-codcia AS INTEGER   FORMAT "999".
DEFINE NEW SHARED VARIABLE cl-codcia AS INTEGER   FORMAT "999".
DEFINE NEW SHARED VARIABLE pv-codcia AS INTEGER   FORMAT "999".
DEFINE NEW SHARED VARIABLE s-nomcia  AS CHARACTER FORMAT "X(50)".
DEFINE NEW SHARED VARIABLE s-nomcia1 AS CHARACTER FORMAT "X(60)".
DEFINE NEW SHARED VARIABLE s-dircia  AS CHARACTER FORMAT "X(50)".


DEF VAR k AS INT NO-UNDO.

DEF VAR pMenuPrincipal  AS CHAR INIT 'bin/menuprincipal'    NO-UNDO.
IF NUM-ENTRIES(SESSION:PARAMETER) < 2 THEN DO:
    MESSAGE 'Error en los parámetros pasados al programa' SKIP
        'Ejemplo de Sintaxis: -param 001,bin/menuprincipal' 
        VIEW-AS ALERT-BOX ERROR.
    QUIT.
END.
ASSIGN
    s-CodCia = INTEGER(ENTRY(1,SESSION:PARAMETER))
    pMenuPrincipal = ENTRY(2,SESSION:PARAMETER)
    NO-ERROR.
IF ERROR-STATUS:ERROR THEN DO:
    MESSAGE 'Error en los parámetros iniciales (-param)' SKIP
        'Sintaxis: -param 001,bin/menuxxxx'
        VIEW-AS ALERT-BOX ERROR.
    QUIT.
END.

DEFINE NEW SHARED VARIABLE pRCID AS INT.

DEFINE VARIABLE OK AS LOGICAL NO-UNDO.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE Procedure
&Scoped-define DB-AWARE no



/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: Procedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW Procedure ASSIGN
         HEIGHT             = 5.5
         WIDTH              = 47.29.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK Procedure 


/* ***************************  Main Block  *************************** */

/* Usuario del Sistema */
RUN bin/_login.p( FALSE ).
IF USERID("integral") = ? THEN QUIT.

IF CAN-FIND( FIRST DICTDB.PF-G004 WHERE
    DICTDB.PF-G004.User-Id  = USERID("integral") AND
    DICTDB.PF-G004.Aplic-Id = "@D" /* SOLO DESARROLLO */ )
THEN DO:
    RUN bin/s-global.p.
    RUN _ab.p.
END.
ELSE DO: 

    DEFINE VAR lConnOk AS LOGICAL.
    DEFINE VAR lExcConn AS CHAR.

    RUN um-verifica-conexiones (OUTPUT lConnOk, OUTPUT lExcConn).

    IF lConnOk = NO THEN QUIT.

    /* Graba datos de la session */
    RUN um-control-usuario (INPUT lExcConn).

    RUN VALUE(pMenuPrincipal).
    
END.
    

QUIT.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&IF DEFINED(EXCLUDE-um-control-usuario) = 0 &THEN

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE um-control-usuario Procedure 
PROCEDURE um-control-usuario :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER pExcConn AS CHAR.

DEFINE VAR lClientIPAddress     AS CHAR.
DEFINE VAR lClientComputerName  AS CHAR.
DEFINE VAR lClientName          AS CHAR.
DEFINE VAR lComputerName        AS CHAR.
DEFINE VAR lRemote-user         AS CHAR.
DEFINE VAR lUserName            AS CHAR.
DEFINE VAR lxClientName         AS CHAR.
DEFINE VAR lXRowId              AS CHAR.
DEFINE VAR lRowId               AS INT.
DEFINE VAR lPid                 AS INT.

lClientIPAddress    = OS-GETENV ( "CLIENTCOMPUTERIPADDRESS").
lClientComputerName = OS-GETENV ( "CLIENTCOMPUTERNAME").
lClientName         = OS-GETENV ( "CLIENTNAME").
lComputerName       = OS-GETENV ( "COMPUTERNAME").
lRemote-user        = OS-GETENV ( "REMOTE_USER").
lUserName           = OS-GETENV ( "USERNAME").

lxClientName        = IF (lClientComputerName = ? OR lClientComputerName = "") THEN lClientName ELSE lClientComputerName.
lxClientName        = IF (CAPS(lxClientName) = "CONSOLE") THEN "" ELSE lxClientName.
lxClientName        = IF (lxClientName = ? OR lxClientName = "") THEN lComputerName ELSE lxClientName.

/* Grabo los datos */
SESSION:TIME-SOURCE = "integral". 
/*
DEFINE VAR xxxx AS CHAR.
xxxx =  CLIENT-CONNECTION-ID /* SERVER-CONNECTION-ID*/  /*string(_Connect._Connect-Pid,"999999999999")*/.
MESSAGE '(' + xxxx + ")" VIEW-AS ALERT-BOX ERROR.
*/

lPid = 0.

FIND FIRST _Myconnection.
IF AVAILABLE _Myconnection THEN DO:    
    lPid    = _MyConnection._MyConn-pid.
END.

CREATE AdmCtrlUser.

    lxRowId = STRING(RECID(AdmCtrlUser),"999999999999").
    lRowId  = INTEGER(lxRowId).
    pRCID   = lRowId.

    ASSIGN  AdmCtrlUser.Numid       = lRowid
            AdmCtrlUser.IPRemoto    = lClientIPAddress
            AdmCtrlUser.PCRemoto    = IF (lClientComputerName = ? OR lClientComputerName = "") THEN lClientName ELSE lClientComputerName
            AdmCtrlUser.PCCliente   = lComputerName
            AdmCtrlUser.UserCliente = lUserName
            AdmCtrlUser.UserRemoto  = lRemote-User
            AdmCtrlUser.UserDB      = USERID("integral") /*s-user-id*/
            AdmCtrlUser.FechInicio  = TODAY
            AdmCtrlUser.HoraInicio  = STRING(TIME,"HH:MM:SS")
            AdmCtrlUser.PCUsuario   = lxClientName
            AdmCtrlUser.IDUsuario   = IF (lRemote-user = ? OR lRemote-user = "") THEN lUserName ELSE lRemote-user
            AdmCtrlUser.num-pid     = lPid
            AdmCtrlUsers.campo-c[2] = pExcConn.                                                                                                     
/*
        FechTermino
        HoraTermino
*/        

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ENDIF

&IF DEFINED(EXCLUDE-um-verifica-conexiones) = 0 &THEN

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE um-verifica-conexiones Procedure 
PROCEDURE um-verifica-conexiones :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

DEFINE OUTPUT PARAMETER pConnOk AS LOGICAL.
DEFINE OUTPUT PARAMETER pExcConn AS CHAR.

DEFINE VAR lClientComputerName  AS CHAR.
DEFINE VAR lClientName          AS CHAR.
DEFINE VAR lComputerName        AS CHAR.
DEFINE VAR lxClientName         AS CHAR.
DEFINE VAR lPid                 AS INT.
DEFINE VAR lUserDB              AS CHAR.
DEFINE VAR lNConexiones         AS INT.
DEFINE VAR lRowId               AS ROWID.
DEFINE VAR lConnPermitidas      AS INT.

pConnOk = NO.
pExcConn = "".

lUserDB = USERID("integral").
IF CAPS(lUserDB) <> 'ADMIN' THEN DO:
    lClientComputerName = OS-GETENV ( "CLIENTCOMPUTERNAME").
    lClientName         = OS-GETENV ( "CLIENTNAME").
    lComputerName       = OS-GETENV ( "COMPUTERNAME").

    lxClientName        = IF (lClientComputerName = ? OR lClientComputerName = "") THEN lClientName ELSE lClientComputerName.
    lxClientName        = IF (CAPS(lxClientName) = "CONSOLE") THEN "" ELSE lxClientName.
    lxClientName        = IF (lxClientName = ? OR lxClientName = "") THEN lComputerName ELSE lxClientName.

    DEF BUFFER B-AdmCtrlUsers FOR AdmCtrlUsers.
    lNConexiones = 0.

    /* Verificar si la PC tiene abierto una conexion */                                                                                         
    FOR EACH AdmCtrlUsers WHERE AdmCtrlUsers.PCusuario = lxClientName 
        AND /*AdmCtrlUsers.FechInicio > 12/15/2013 AND*/ fechTermino = ? 
        AND num-pid > 0 NO-LOCK :
        lPid    = AdmCtrlUsers.num-pid.
        lRowId  = ROWID(AdmCtrlUsers).
        /**/        
        FIND FIRST _Connect WHERE _Connect-Pid = lPid NO-LOCK NO-ERROR.
        IF AVAILABLE _Connect THEN DO:
            lNConexiones = lNConexiones + 1.
        END.
        ELSE DO:
            /* Conexion Muerta - actualizo fecha de cierre */
            /*
                Se quedaron registros abiertos, cerraron a la mala
            */
            FIND B-AdmCtrlUsers WHERE ROWID(B-AdmCtrlUsers) = lRowid EXCLUSIVE NO-ERROR.
            IF AVAILABLE B-AdmCtrlUsers THEN DO:
                ASSIGN  b-AdmCtrlUsers.FechTermino  = TODAY
                        b-AdmCtrlUsers.HoraTermino  = STRING(TIME,"HH:MM:SS")
                        b-AdmCtrlUsers.campo-c[1] = 'X'.
            END.
        END.
    END.
    RELEASE B-AdmCtrlUsers.
    /* Verifico si esta autorizado a usar mas de una conexion */
    lConnPermitidas = 0.
    FIND FIRST AdmPcExcep WHERE pcName = lxClientName NO-LOCK NO-ERROR.
    IF AVAILABLE AdmPcExcep THEN DO:
        lConnPermitidas = AdmPcExcep.NumConn.
    END.
    IF lNConexiones > lConnPermitidas THEN DO:
        
        pExcConn = STRING(lNConexiones,">>,>>9").

        MESSAGE 'Se ha excedido del MAXIMOS de conecciones desde esta PC' SKIP 
            "Se esta monitoreando el nro de accesos desde su MAQUINA...(" + pExcConn + ")"
            VIEW-AS ALERT-BOX ERROR.
        /*pConnOk = NO.*/
        pConnOk = YES.
        
    END.
    ELSE pConnOk = YES.
END.
ELSE pConnOk = YES.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ENDIF

